BITWISE OPERATIONS:
- and &
0 & 0 = 0
0 & 1 = 0
1 & 0 = 0
1 & 1 = 1

0000 1001
1010 1010 &
------------
0000 1000

- or  |
0 | 0 = 0
0 | 1 = 1
1 | 0 = 1
1 | 1 = 1

0000 1001
1010 1010 |
------------
1010 1011

- xor ^ = exclusive or
0 ^ 0 = 0
0 ^ 1 = 1
1 ^ 0 = 1
1 ^ 1 = 0

0000 1001
1010 1010 ^
------------
1010 0011

- negation ~
~0 = 1
~1 = 0

1001 0101 ~
-----------
0110 1010

- left shift <<
Move the bits left. Bits on the left disappear. 
Bits on the right gets replaced with zeroes.

1001 0101 << 2 = 0101 0100

- right shift >>
Move the bits right. Bits on the left gets replaced by previous leftmost bit.

1001 0101 >> 2 = 1110 0101
0001 0101 >> 2 = 0010 0101

TUTORIAL QUESTION:
uint16_t a = 0x5555, b = 0xAAAA, c = 0x0001;

Best way is to convert to binary first.
a = 0101 0101 0101 0101
b = 1010 1010 1010 1010
c = 0000 0000 0000 0001

a | b (bitwise OR)

a & b (bitwise AND)

a ^ b (bitwise XOR)

a & ~b (bitwise AND)

c << 6 (left shift)

a >> 4 (right shift)

a & (b << 1)

b | c

a & ~c


